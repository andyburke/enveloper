'use strict';

require( 'dotenv' ).config();
const Delver = require( 'delver' );
const detect_indent = require( 'detect-indent' );
const fs = require( 'fs' );
const path = require( 'path' );
const util = require( 'util' );

const enveloper = require( path.resolve( path.join( __dirname, '..', 'index.js' ) ) );
const find_in_tree = util.promisify( require( 'walk-up' ) );
const read_from_stdin = require( path.resolve( path.join( __dirname, '..', 'read_from_stdin.js' ) ) );

module.exports = {
    command: 'set [path] [secret] [--key <key>] [--keyvar <environment variable>] [--envelope <filename>]',
    builder: yargs => {
        yargs
            .positional( 'path', {
                desc: 'the path (dot separated) to store the secret at'
            } )
            .positional( 'secret', {
                desc: 'the secret to encrypt'
            } )
            .option( 'key', {
                desc: 'the encryption key, if not specified, one is generated'
            } )
            .option( 'keyvar', {
                desc: 'the name of an environment variable containing the key to use'
            } )
            .option( 'envelope', {
                desc: 'the filename to store to',
                default: 'envelope.json'
            } );
    },
    describe: 'Encrypt and store the given secret in the envelope. If no key is specified, a key will be generated.',
    handler: async options => {
        const input = {};

        if ( typeof options.path !== 'string' ) {
            console.error( 'You must specify a path to store the secret at in the envelope.' );
            process.exit( 1 );
        }

        if ( typeof options.key !== 'undefined' ) {
            input.key = options.key;
        }
        else if ( typeof options.keyvar !== 'undefined' ) {
            input.key = process.env[ options.keyvar ];
        }

        if ( typeof options.secret === 'undefined' ) {
            options.secret = await read_from_stdin();
        }

        // cast to a string to ensure things like numbers are treated properly
        const result = enveloper.seal( String( options.secret ), input );

        const string_result = enveloper.to_string( result );

        const envelope_search_result = await find_in_tree( process.cwd(), options.envelope );

        const envelope_path = envelope_search_result && envelope_search_result.found ? path.join( envelope_search_result.path, options.envelope ) : path.join( process.cwd(), options.envelope );

        const envelope_contents = fs.existsSync( envelope_path ) ? fs.readFileSync( envelope_path, 'utf8' ) : '{}';

        const indent_info = detect_indent( envelope_contents );

        const envelope = JSON.parse( envelope_contents );

        Delver.set( envelope, options.path, string_result );

        fs.writeFileSync( envelope_path, JSON.stringify( envelope, null, indent_info && indent_info.amount || 4 ), 'utf8' );

        if ( typeof options.key === 'undefined' && typeof options.keyvar === 'undefined' ) {
            console.log( `autogenerated key: ${ result.key }` );
        }

        return result;
    }
};
